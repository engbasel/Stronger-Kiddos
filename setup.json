{
    "folders": [
      "lib/core",
      "lib/core/Widget",
      "lib/core/entities",
      "lib/core/errors",
      "lib/core/models",
      "lib/core/helper_functions",
      "lib/core/usecases",
      "lib/core/network",
      "lib/core/sercvices",
      "lib/core/sercvices/supabase",
      "lib/core/sercvices/Firebase",
      "lib/core/utils",
      "lib/features",
      "lib/features/authentication",
      "lib/features/authentication/domain",
      "lib/features/authentication/domain/entities",
      "lib/features/authentication/domain/repositories",
      "lib/features/authentication/domain/usecases",
      "lib/features/authentication/data",
      "lib/features/authentication/presentation",
      "lib/features/authentication/presentation/login",
      "lib/features/authentication/presentation/signup",
      "lib/features/onboarding",
      "lib/features/onboarding/presentation",
      "lib/features/onboarding/presentation/views",
      "lib/features/onboarding/presentation/widgets",
      "lib/features/splash",
      "lib/features/splash/presentation",
      "lib/features/splash/presentation/views",
      "lib/features/splash/presentation/widgets",
      "lib/features/user_profile",
      "lib/features/user_profile/domain",
      "lib/features/user_profile/domain/entities",
      "lib/features/user_profile/domain/repositories",
      "lib/features/user_profile/domain/usecases",
      "lib/features/user_profile/data",
      "lib/features/user_profile/presentation",
      "lib/features/user_profile/presentation/views",
      "lib/features/user_profile/presentation/widgets",
      "assets/images/SvgImage",
      "assets/images/pngImage"
    ],
    "files": {
      "lib/core/errors/failures.dart": "class Failure {}",
      "lib/core/errors/exceptions.dart": "class Exceptions {}",
      "lib/APP.dart": "class Failure {}",
      "lib/constants.dart": "class AppConstants {}",
      "lib/core/usecases/usecase.dart": "abstract class UseCase<Type, Params> { Future<Type> call(Params params); }",
      "lib/core/network/network_info.dart": "class NetworkInfo { Future<bool> isConnected() async { return true; } }",
      "lib/core/utils/validator.dart": "class Validator { bool isValidEmail(String email) { return email.contains('@'); } }",
      "lib/core/utils/app_colors.dart": "import 'package:flutter/material.dart';\n\nclass AppColors {\n  static const Color primaryColor = Color(0xFF6200EE);\n  static const Color secondaryColor = Color(0xFF03DAC6);\n  static const Color backgroundColor = Color(0xFFF5F5F5);\n  static const Color textColor = Color(0xFF000000);\n}",
      "lib/core/utils/app_decorations.dart": "import 'package:flutter/material.dart';\nimport 'app_colors.dart';\n\nclass AppDecorations {\n  static BoxDecoration buttonDecoration = BoxDecoration(\n    color: AppColors.primaryColor,\n    borderRadius: BorderRadius.circular(8),\n  );\n\n  static BoxDecoration containerDecoration = BoxDecoration(\n    color: AppColors.backgroundColor,\n    borderRadius: BorderRadius.circular(12),\n    boxShadow: [\n      BoxShadow(color: Colors.grey.withOpacity(0.2), blurRadius: 6, spreadRadius: 2)\n    ],\n  );\n}",
      "lib/core/utils/app_images.dart": "class AppImages {\n  static const String logo = 'assets/images/logo.png';\n  static const String background = 'assets/images/background.png';\n}",
      "lib/core/utils/app_text_styles.dart": "import 'package:flutter/material.dart';\nimport 'app_colors.dart';\n\nclass AppTextStyles {\n  static const TextStyle headline = TextStyle(\n    fontSize: 24,\n    fontWeight: FontWeight.bold,\n    color: AppColors.textColor,\n  );\n\n  static const TextStyle subheading = TextStyle(\n    fontSize: 18,\n    fontWeight: FontWeight.w600,\n    color: AppColors.textColor,\n  );\n\n  static const TextStyle bodyText = TextStyle(\n    fontSize: 14,\n    fontWeight: FontWeight.normal,\n    color: AppColors.textColor,\n  );\n}",
      "lib/core/utils/backend_endpoint.dart": "class BackendEndpoints {\n  static const String baseUrl = 'https://api.yourapp.com/';\n  static const String loginEndpoint = 'auth/login';\n  static const String signupEndpoint = 'auth/signup';\n  static const String getUserDetails = 'user/details';\n}",
      "lib/features/authentication/domain/entities/user.dart": "class User { final String id; final String name; User({required this.id, required this.name}); }",
      "lib/features/authentication/domain/repositories/auth_repository.dart": "abstract class AuthRepository { Future<User> getUserDetails(String id); }",
      "lib/features/authentication/domain/repositories/auth_repository_implementation.dart": "import 'package:your_app/features/authentication/domain/repositories/auth_repository.dart'; import 'package:your_app/core/network/network_info.dart'; import 'package:your_app/core/utils/backend_endpoint.dart'; import 'package:dio/dio.dart'; class AuthRepositoryImpl implements AuthRepository { final NetworkInfo networkInfo; final Dio dio; AuthRepositoryImpl({required this.networkInfo, required this.dio}); @override Future<User> getUserDetails(String id) async { if (await networkInfo.isConnected()) { final response = await dio.get('${BackendEndpoints.baseUrl}${BackendEndpoints.getUserDetails}/$id'); return User(id: response.data['id'], name: response.data['name']); } else { throw Exception('No internet connection'); } } }",
      "lib/features/authentication/data/data_sources/auth_remote_data_source.dart": "import 'package:dio/dio.dart'; import 'package:your_app/core/utils/backend_endpoint.dart'; class AuthRemoteDataSource { final Dio dio; AuthRemoteDataSource(this.dio); Future<Map<String, dynamic>> login(String email, String password) async { final response = await dio.post('${BackendEndpoints.baseUrl}${BackendEndpoints.loginEndpoint}', data: {'email': email, 'password': password}); return response.data; } }", 
      "lib/features/authentication/data/data_sources/auth_local_data_source.dart": "import 'package:shared_preferences/shared_preferences.dart'; class AuthLocalDataSource { final SharedPreferences sharedPreferences; AuthLocalDataSource(this.sharedPreferences); Future<void> cacheUserDetails(String userId) async { await sharedPreferences.setString('userId', userId); } Future<String?> getCachedUserDetails() async { return sharedPreferences.getString('userId'); } }",
      "lib/features/authentication/data/models/user_model.dart": "import 'package:your_app/features/authentication/domain/entities/user.dart'; class UserModel extends User { UserModel({required String id, required String name}) : super(id: id, name: name); factory UserModel.fromJson(Map<String, dynamic> json) { return UserModel(id: json['id'], name: json['name']); } Map<String, dynamic> toJson() { return {'id': id, 'name': name}; } }", 
      

      "lib/features/authentication/domain/usecases/get_user.dart": "class GetUserUseCase implements UseCase<User, String> { final AuthRepository repository; GetUserUseCase(this.repository); Future<User> call(String userId) async { return await repository.getUserDetails(userId); } }",
      "lib/features/authentication/presentation/login/login_view.dart": "import 'package:flutter/material.dart'; class Loginview extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold(body: Center(child: Text('Login'))); } }",
      "lib/features/authentication/presentation/signup/signup_view.dart": "import 'package:flutter/material.dart'; class SignUpview extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold(body: Center(child: Text('Sign Up'))); } }",
      "lib/features/onboarding/presentation/views/onboarding_view.dart": "import 'package:flutter/material.dart'; class Onboardingview extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold(body: Center(child: Text('Onboarding'))); } }",
      "lib/features/onboarding/presentation/widgets/onboarding_widget.dart": "import 'package:flutter/material.dart'; class OnboardingWidget extends StatelessWidget { @override Widget build(BuildContext context) { return Container(); } }",
      "lib/features/splash/presentation/views/splash_view.dart": "import 'package:flutter/material.dart'; class Splashview extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold(body: Center(child: Text('Splash'))); } }",
      "lib/features/splash/presentation/widgets/splash_widget.dart": "import 'package:flutter/material.dart'; class SplashWidget extends StatelessWidget { @override Widget build(BuildContext context) { return Container(); } }",
      "lib/features/user_profile/presentation/views/user_profile_view.dart": "import 'package:flutter/material.dart'; class UserProfileview extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold(body: Center(child: Text('User Profile'))); } }",
      "lib/features/user_profile/presentation/widgets/user_profile_widget.dart": "import 'package:flutter/material.dart'; class UserProfileWidget extends StatelessWidget { @override Widget build(BuildContext context) { return Container(); } }"
    },
    "packages": [
      "flutter_bloc",
      "dio",
      "shared_preferences",
      "equatable",
      "get_it",
      "card_swiper",
      "cloud_firestore",
      "cupertino_icons",
      "dartz",
      "dots_indicator",
      "dynamic_height_grid_view",
      "fancy_shimmer_image",
      "firebase_auth",
      "firebase_core",
      "firebase_storage",
      "flutter_gemini",
      "flutter_iconly",
      "flutter_launcher_icons",
      "flutter_svg",
      "fluttertoast",
      "google_fonts",
      "google_sign_in",
      "image_picker",
      "intl",
      "ionicons",
      "lottie",
      "modal_progress_hud_nsn",
      "provider",
      "shimmer",
      "stylish_bottom_bar",
      "top_snackbar_flutter",
      "uuid"
    ],
    "dev_dependencies": [
      "build_runner",
      "mockito"
    ]
  }
  